openapi: 3.0.0
info:
  title: Zaprogramuj Finanse
  version: 1.0.0

paths:
  /users/{id}:
    get:
      operationId: "getUserById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
    put:
      operationId: "updateUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
    delete:
      operationId: "deleteUser"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
  /api/auth:
    post:
      operationId: "auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: Successful operation
  /api/auth/register:
    post:
      operationId: "register"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: Successfully created
  /api/auth/login:
    post:
      operationId: "login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful operation
  /users/{userId}/categories:
    get:
      operationId: "getCategoriesForUser"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
    post:
      operationId: "createCategoryForUser"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Successfully created
  /users/{userId}/categories/{categoryId}:
    get:
      operationId: "getCategoryForUser"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
    put:
      operationId: "updateCategoryForUser"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Successfully created
    delete:
      operationId: "deleteCategoryForUser"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    Auth:
      type: object
      properties:
        token:
          type: string
    Register:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Category:
      type: object
      properties:
        name:
          type: string